<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.kerninventory.mybatis.gen.tkmybatis.mapper.TestMapper">
  <resultMap id="BaseResultMap" type="cn.kerninventory.mybatis.gen.tkmybatis.pojo.Test">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="c_bigint" jdbcType="BIGINT" property="cBigint" />
    <result column="c_varchar" jdbcType="VARCHAR" property="cVarchar" />
    <result column="c_bit" jdbcType="BIT" property="cBit" />
    <result column="c_char" jdbcType="CHAR" property="cChar" />
    <result column="c_date" jdbcType="DATE" property="cDate" />
    <result column="c_datetime" jdbcType="TIMESTAMP" property="cDatetime" />
    <result column="c_decimal" jdbcType="DECIMAL" property="cDecimal" />
    <result column="c_double" jdbcType="DOUBLE" property="cDouble" />
    <result column="c_float" jdbcType="REAL" property="cFloat" />
    <result column="c_int" jdbcType="INTEGER" property="cInt" />
    <result column="c_integer" jdbcType="INTEGER" property="cInteger" />
    <result column="c_mediumint" jdbcType="INTEGER" property="cMediumint" />
    <result column="c_numeric" jdbcType="DECIMAL" property="cNumeric" />
    <result column="c_real" jdbcType="DOUBLE" property="cReal" />
    <result column="c_smallint" jdbcType="SMALLINT" property="cSmallint" />
    <result column="c_time" jdbcType="TIME" property="cTime" />
    <result column="c_timestamp" jdbcType="TIMESTAMP" property="cTimestamp" />
    <result column="c_tinyint" jdbcType="TINYINT" property="cTinyint" />
    <result column="c_tinytext" jdbcType="VARCHAR" property="cTinytext" />
    <result column="c_year" jdbcType="DATE" property="cYear" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.kerninventory.mybatis.gen.tkmybatis.pojo.TestWithBLOBs">
    <!--
      WARNING - @mbg.generated
    -->
    <result column="c_binary" jdbcType="BINARY" property="cBinary" />
    <result column="c_blob" jdbcType="LONGVARBINARY" property="cBlob" />
    <result column="c_geometry" jdbcType="BINARY" property="cGeometry" />
    <result column="c_geometrycollection" jdbcType="BINARY" property="cGeometrycollection" />
    <result column="c_json" jdbcType="LONGVARCHAR" property="cJson" />
    <result column="c_linestring" jdbcType="BINARY" property="cLinestring" />
    <result column="c_longblob" jdbcType="LONGVARBINARY" property="cLongblob" />
    <result column="c_longtext" jdbcType="LONGVARCHAR" property="cLongtext" />
    <result column="c_mediumblob" jdbcType="LONGVARBINARY" property="cMediumblob" />
    <result column="c_mediumtext" jdbcType="LONGVARCHAR" property="cMediumtext" />
    <result column="c_multilinestring" jdbcType="BINARY" property="cMultilinestring" />
    <result column="c_multipoint" jdbcType="BINARY" property="cMultipoint" />
    <result column="c_multipolygon" jdbcType="BINARY" property="cMultipolygon" />
    <result column="c_point" jdbcType="BINARY" property="cPoint" />
    <result column="c_polygon" jdbcType="BINARY" property="cPolygon" />
    <result column="c_text" jdbcType="LONGVARCHAR" property="cText" />
    <result column="c_tinyblob" jdbcType="VARBINARY" property="cTinyblob" />
    <result column="c_varbinary" jdbcType="VARBINARY" property="cVarbinary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    c_bigint, c_varchar, c_bit, c_char, c_date, c_datetime, c_decimal, c_double, c_float, 
    c_int, c_integer, c_mediumint, c_numeric, c_real, c_smallint, c_time, c_timestamp, 
    c_tinyint, c_tinytext, c_year
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    c_binary, c_blob, c_geometry, c_geometrycollection, c_json, c_linestring, c_longblob, 
    c_longtext, c_mediumblob, c_mediumtext, c_multilinestring, c_multipoint, c_multipolygon, 
    c_point, c_polygon, c_text, c_tinyblob, c_varbinary
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.kerninventory.mybatis.gen.tkmybatis.pojo.TestExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.kerninventory.mybatis.gen.tkmybatis.pojo.TestExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.kerninventory.mybatis.gen.tkmybatis.pojo.TestExample">
    <!--
      WARNING - @mbg.generated
    -->
    delete from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="cn.kerninventory.mybatis.gen.tkmybatis.pojo.TestExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
    -->
    select count(*) from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update test
    <set>
      <if test="record.cBigint != null">
        c_bigint = #{record.cBigint,jdbcType=BIGINT},
      </if>
      <if test="record.cVarchar != null">
        c_varchar = #{record.cVarchar,jdbcType=VARCHAR},
      </if>
      <if test="record.cBit != null">
        c_bit = #{record.cBit,jdbcType=BIT},
      </if>
      <if test="record.cChar != null">
        c_char = #{record.cChar,jdbcType=CHAR},
      </if>
      <if test="record.cDate != null">
        c_date = #{record.cDate,jdbcType=DATE},
      </if>
      <if test="record.cDatetime != null">
        c_datetime = #{record.cDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cDecimal != null">
        c_decimal = #{record.cDecimal,jdbcType=DECIMAL},
      </if>
      <if test="record.cDouble != null">
        c_double = #{record.cDouble,jdbcType=DOUBLE},
      </if>
      <if test="record.cFloat != null">
        c_float = #{record.cFloat,jdbcType=REAL},
      </if>
      <if test="record.cInt != null">
        c_int = #{record.cInt,jdbcType=INTEGER},
      </if>
      <if test="record.cInteger != null">
        c_integer = #{record.cInteger,jdbcType=INTEGER},
      </if>
      <if test="record.cMediumint != null">
        c_mediumint = #{record.cMediumint,jdbcType=INTEGER},
      </if>
      <if test="record.cNumeric != null">
        c_numeric = #{record.cNumeric,jdbcType=DECIMAL},
      </if>
      <if test="record.cReal != null">
        c_real = #{record.cReal,jdbcType=DOUBLE},
      </if>
      <if test="record.cSmallint != null">
        c_smallint = #{record.cSmallint,jdbcType=SMALLINT},
      </if>
      <if test="record.cTime != null">
        c_time = #{record.cTime,jdbcType=TIME},
      </if>
      <if test="record.cTimestamp != null">
        c_timestamp = #{record.cTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cTinyint != null">
        c_tinyint = #{record.cTinyint,jdbcType=TINYINT},
      </if>
      <if test="record.cTinytext != null">
        c_tinytext = #{record.cTinytext,jdbcType=VARCHAR},
      </if>
      <if test="record.cYear != null">
        c_year = #{record.cYear,jdbcType=DATE},
      </if>
      <if test="record.cBinary != null">
        c_binary = #{record.cBinary,jdbcType=BINARY},
      </if>
      <if test="record.cBlob != null">
        c_blob = #{record.cBlob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.cGeometry != null">
        c_geometry = #{record.cGeometry,jdbcType=BINARY},
      </if>
      <if test="record.cGeometrycollection != null">
        c_geometrycollection = #{record.cGeometrycollection,jdbcType=BINARY},
      </if>
      <if test="record.cJson != null">
        c_json = #{record.cJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cLinestring != null">
        c_linestring = #{record.cLinestring,jdbcType=BINARY},
      </if>
      <if test="record.cLongblob != null">
        c_longblob = #{record.cLongblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.cLongtext != null">
        c_longtext = #{record.cLongtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cMediumblob != null">
        c_mediumblob = #{record.cMediumblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.cMediumtext != null">
        c_mediumtext = #{record.cMediumtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cMultilinestring != null">
        c_multilinestring = #{record.cMultilinestring,jdbcType=BINARY},
      </if>
      <if test="record.cMultipoint != null">
        c_multipoint = #{record.cMultipoint,jdbcType=BINARY},
      </if>
      <if test="record.cMultipolygon != null">
        c_multipolygon = #{record.cMultipolygon,jdbcType=BINARY},
      </if>
      <if test="record.cPoint != null">
        c_point = #{record.cPoint,jdbcType=BINARY},
      </if>
      <if test="record.cPolygon != null">
        c_polygon = #{record.cPolygon,jdbcType=BINARY},
      </if>
      <if test="record.cText != null">
        c_text = #{record.cText,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cTinyblob != null">
        c_tinyblob = #{record.cTinyblob,jdbcType=VARBINARY},
      </if>
      <if test="record.cVarbinary != null">
        c_varbinary = #{record.cVarbinary,jdbcType=VARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update test
    set c_bigint = #{record.cBigint,jdbcType=BIGINT},
      c_varchar = #{record.cVarchar,jdbcType=VARCHAR},
      c_bit = #{record.cBit,jdbcType=BIT},
      c_char = #{record.cChar,jdbcType=CHAR},
      c_date = #{record.cDate,jdbcType=DATE},
      c_datetime = #{record.cDatetime,jdbcType=TIMESTAMP},
      c_decimal = #{record.cDecimal,jdbcType=DECIMAL},
      c_double = #{record.cDouble,jdbcType=DOUBLE},
      c_float = #{record.cFloat,jdbcType=REAL},
      c_int = #{record.cInt,jdbcType=INTEGER},
      c_integer = #{record.cInteger,jdbcType=INTEGER},
      c_mediumint = #{record.cMediumint,jdbcType=INTEGER},
      c_numeric = #{record.cNumeric,jdbcType=DECIMAL},
      c_real = #{record.cReal,jdbcType=DOUBLE},
      c_smallint = #{record.cSmallint,jdbcType=SMALLINT},
      c_time = #{record.cTime,jdbcType=TIME},
      c_timestamp = #{record.cTimestamp,jdbcType=TIMESTAMP},
      c_tinyint = #{record.cTinyint,jdbcType=TINYINT},
      c_tinytext = #{record.cTinytext,jdbcType=VARCHAR},
      c_year = #{record.cYear,jdbcType=DATE},
      c_binary = #{record.cBinary,jdbcType=BINARY},
      c_blob = #{record.cBlob,jdbcType=LONGVARBINARY},
      c_geometry = #{record.cGeometry,jdbcType=BINARY},
      c_geometrycollection = #{record.cGeometrycollection,jdbcType=BINARY},
      c_json = #{record.cJson,jdbcType=LONGVARCHAR},
      c_linestring = #{record.cLinestring,jdbcType=BINARY},
      c_longblob = #{record.cLongblob,jdbcType=LONGVARBINARY},
      c_longtext = #{record.cLongtext,jdbcType=LONGVARCHAR},
      c_mediumblob = #{record.cMediumblob,jdbcType=LONGVARBINARY},
      c_mediumtext = #{record.cMediumtext,jdbcType=LONGVARCHAR},
      c_multilinestring = #{record.cMultilinestring,jdbcType=BINARY},
      c_multipoint = #{record.cMultipoint,jdbcType=BINARY},
      c_multipolygon = #{record.cMultipolygon,jdbcType=BINARY},
      c_point = #{record.cPoint,jdbcType=BINARY},
      c_polygon = #{record.cPolygon,jdbcType=BINARY},
      c_text = #{record.cText,jdbcType=LONGVARCHAR},
      c_tinyblob = #{record.cTinyblob,jdbcType=VARBINARY},
      c_varbinary = #{record.cVarbinary,jdbcType=VARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
    -->
    update test
    set c_bigint = #{record.cBigint,jdbcType=BIGINT},
      c_varchar = #{record.cVarchar,jdbcType=VARCHAR},
      c_bit = #{record.cBit,jdbcType=BIT},
      c_char = #{record.cChar,jdbcType=CHAR},
      c_date = #{record.cDate,jdbcType=DATE},
      c_datetime = #{record.cDatetime,jdbcType=TIMESTAMP},
      c_decimal = #{record.cDecimal,jdbcType=DECIMAL},
      c_double = #{record.cDouble,jdbcType=DOUBLE},
      c_float = #{record.cFloat,jdbcType=REAL},
      c_int = #{record.cInt,jdbcType=INTEGER},
      c_integer = #{record.cInteger,jdbcType=INTEGER},
      c_mediumint = #{record.cMediumint,jdbcType=INTEGER},
      c_numeric = #{record.cNumeric,jdbcType=DECIMAL},
      c_real = #{record.cReal,jdbcType=DOUBLE},
      c_smallint = #{record.cSmallint,jdbcType=SMALLINT},
      c_time = #{record.cTime,jdbcType=TIME},
      c_timestamp = #{record.cTimestamp,jdbcType=TIMESTAMP},
      c_tinyint = #{record.cTinyint,jdbcType=TINYINT},
      c_tinytext = #{record.cTinytext,jdbcType=VARCHAR},
      c_year = #{record.cYear,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>